{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyPh6Ql0LyBPlccAHsxQvvbJ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kimmynav1030/BDATA_200/blob/main/Toolbox\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Week 3: Building a Data Analytics Toolbox"
      ],
      "metadata": {
        "id": "f58JT4Bn--9A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "rna_seq = \"AUGGGCGGAUACCCCUUAUUG\" #defining the seqence we want to analyze\n",
        "len(rna_seq) #to test the value of the length\n",
        "print(rna_seq)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N4offhCT_H4U",
        "outputId": "0685cedc-babb-4857-b57d-810f99abe8b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUGGGCGGAUACCCCUUAUUG\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def another_rna_to_aa(rna):     #defining the function - def function():\n",
        "                                #don't have to have an input\n",
        "    codons = {'Phe': ['UUU', 'UUC'],\n",
        "                                #defining the meaning of the codons within curly\n",
        "                                #brackets -- each comma after last row of []\n",
        "                                #bracketis a definition in the dictionary\n",
        "\n",
        "\n",
        "              'Leu': ['UUA', 'UUG', 'CUU', 'CUC', 'CUA', 'CUG'],\n",
        "              'Ile': ['AUU', 'AUC', 'AUA'],\n",
        "              'Met': ['AUG'],\n",
        "              'Val': ['GUU', 'GUC', 'GUA', 'GUG'],\n",
        "              'Ser': ['UCU', 'UCC', 'UCA', 'UCG'],\n",
        "              'Pro': ['CCU', 'CCC', 'CCA', 'CCG'],\n",
        "              'Thr': ['ACU', 'ACC', 'ACA', 'ACG'],\n",
        "              'Ala': ['GCU', 'GCC', 'GCA', 'GCG'],\n",
        "              'Tyr': ['UAU', 'UAC'],\n",
        "              'Stop': ['UAA', 'UAG', 'UGA'],\n",
        "              'His': ['CAU', 'CAC'],\n",
        "              'Gln': ['CAA', 'CAG'],\n",
        "              'Asn': ['AAU', 'AAC'],\n",
        "              'Lys': ['AAA', 'AAG'],\n",
        "              'Asp': ['GAU', 'GAC'],\n",
        "              'Glu': ['GAA', 'GAG'],\n",
        "              'Cys': ['UGU', 'UGC'],\n",
        "              'Trp': ['UGG'],\n",
        "              'Arg': ['CGU', 'CGC', 'CGA', 'CGG'],\n",
        "              'Ser': ['AGU', 'AGC'],\n",
        "              'Arg': ['AGA', 'AGG'],\n",
        "              'Gly': ['GGU', 'GGC', 'GGA', 'GGG']}\n",
        "    codon_list = [rna[index:index + 3] for index in range(0, len(rna), 3)]\n",
        "    aa_seq = ''\n",
        "    for codon in codon_list: #filtering through list 2\n",
        "      for key in codons.keys(): #filtering through list 1\n",
        "        if codon in codons[key]: #conditional statement to add string into vaule\n",
        "          aa_seq += key + ' ' # aa_seq = aa=seq + key + ' ' -- formatting\n",
        "    return aa_seq.rstrip()    #returning string values by slicing the genes\n"
      ],
      "metadata": {
        "id": "iZ-Ng-07F2JO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "translated_aa = another_rna_to_aa(rna_seq) #defining new string value, using\n",
        "  #the function above, the input \"rna_seq\" is filtered through to produce the\n",
        "  #needed string\n",
        "print(translated_aa)\n",
        "  #telling python to print the ones we want"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R3Dcj0bjGtqd",
        "outputId": "367f2b85-d227-4eda-d1d3-503954fe4a8e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Met Gly Gly Tyr Pro Leu Leu\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "dGyx-qTN_bGA"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Notes"
      ],
      "metadata": {
        "id": "D1Ah4JVh_b6I"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Returning the type of value returned in a function"
      ],
      "metadata": {
        "id": "K11sehFW_mCT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "type(rna_seq)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "39UKUT0LBcRG",
        "outputId": "cfa80598-d648-40b3-d908-40dc17f40f82"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Defining a function"
      ],
      "metadata": {
        "id": "wvubsw_a_4I9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def function():"
      ],
      "metadata": {
        "id": "KeATJUZxB4yO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Exercises"
      ],
      "metadata": {
        "id": "ahiD8MafAotM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from random import choice\n",
        "\n",
        "maternal_alleles = [\"A\",\"a\"]\n",
        "paternal_alleles = [\"A\",\"a\"]\n",
        "\n",
        "egg_allele = choice(maternal_alleles)\n",
        "sperm_allele = choice(paternal_alleles)\n",
        "\n",
        "offspring_genotype = sorted(egg_allele + sperm_allele)\n",
        "print(f\"The genotype of the offspring is {offspring_genotype}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mTlii5HUQi0N",
        "outputId": "e2ffb45d-5ae3-4876-c8e4-42ea2dd67a4c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The genotype of the offspring is ['a', 'a']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Imagine we'd calculated several parameters for the genome\n",
        "header_fields = [\"Genus\",\"Species\",\"Strain\",\"Chromosome Type\",\"Genome Length\",\"Coding Regions\",\"GC content\"]\n",
        "header_line = \"\\t\".join(header_fields)+\"\\n\"\n",
        "print(header_line)\n",
        "\n",
        "\n",
        "#Most commonly, this type of code would be inside a for loop\n",
        "#where we were analyzing many genomes, and generating one line of\n",
        "#results per genome analyzed.\n",
        "#(here I just hard-code the results for simplicity).\n",
        "\n",
        "gc_content = 57.0\n",
        "genome_length_nt = 4195195\n",
        "chromosome_type = \"circular\"\n",
        "coding_regions = 4276\n",
        "\n",
        "#Get the genus name and species name from the full strain id\n",
        "strain_id = \"Bacillus subtilis SZMC 6179J\"\n",
        "genus,species,strain_id_part1,strain_id_part2 = strain_id.split()\n",
        "\n",
        "result_fields = [\"Genus\",\"Species\",\"Strain\",\"Chromosome Type\",\"Genome Length\",\"Coding Regions\",\"GC content\"]\n",
        "result_line = \"\\t\".join(result_fields) + \"\\n\"\n",
        "print(result_line)\n",
        "\n",
        "#We would go on to open a results file\n",
        "#and write the results to it."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pEx20KysQo2u",
        "outputId": "07859864-e655-497c-a45e-3458c2295c4b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Genus\tSpecies\tStrain\tChromosome Type\tGenome Length\tCoding Regions\tGC content\n",
            "\n",
            "Genus\tSpecies\tStrain\tChromosome Type\tGenome Length\tCoding Regions\tGC content\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-Br1yLFwRRDY"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}